# Official Appian Documentation 
- https://docs.appian.com/suite/help/22.4/

## Remember This For Later
- [Custom Data Types](https://docs.appian.com/suite/help/22.4/Custom_Data_Types.html)
- Adding .data to a query will allow you to get just the data itself
- Screen readers are not able to announce richtext styles
- "Rule inputs" are variables that pass data into or out of an interface.
- Use a "Primitive Data Type" to store system data types, such as Number (Integer) or Boolean.
- Use a "Record type" to display record data in an interface, like in the summary view of a record.


## User Interface Stuff
- The side-by-side layout will ensure
that the related Make and Model fields stay next to each other on a narrower screen.
Keep in mind that columns layouts are flattened into a single column on mobile devices.
If you need certain related fields to stay together, use side-by-side layouts.
- "Patterns" provide a combination of components and dynamic expressions to achieve common user-interface designs.
- "Side by side" is the best layout when you need to display several small details grouped together.
- The "configuration pane" is used to configure components and rule inputs and view local variables.
- "Expression mode" reveals the full interface's expression allowing you to edit expressions as needed.
- An interface inherits the security of its parent folder. To view or make any changes to the object security, go to Settings, then Security.
- Like other Appian objects, use application groups rather than individual users to configure security because users can be deactivated. 
- If a user does not have at least viewer permissions, they will not be able to see the interface in the deployed application.
- When you’re using an interface to add or update record data, it’s most useful to use a record type as a rule input when your record type uses a database as the source and has data sync enabled.
- Typically, the display value is configured using a rule input.
- To save data that users enter into the form, configure the Save Input To field. Typically, you'll use a rule input field to map the value to a data field in the record type
- You can also use an expression to specify the condition for triggering the invalid value message. For example, you can write an expression so that the date entered in a date field is not in the future.
- You see a pink highlight that indicates where you are inserting a component on the canvas.
- To build your interface, first use layouts to organize the content, then add components to display data. Then, use the Component Configuration pane to make changes to the configuration as needed—for example, to update the labels, add conditional visibility, or save data to a rule input.
- "local variables" are similar to "rule inputs", except local variables do not pass data into and out of the interface.
- "Local variables" define and store temporary values within an expression. They are useful when you only need values within a particular expression.
- A "local variable" will hold a value temporarily, until you save it. For example, you can save the value of a local variable into a rule input.
- "Local variables" can be defined by other variables or left undefined
- The "a!localVariables()" function needs to wrap around the entire interface’s expression.
- There are two main methods for testing, depending on the function of your interface: manual testing (for editable interfaces) or using test cases via the Test Inputs pane (for read-only interfaces).
- To ensure you dont mess up anything while testing, click the preview tab
- Check performance tab when testing as well
- Place A1localvariables above the ui form/interface in expression mode and then use the ui form/interface as the result parameter. Example is below
- In some cases, you may want to only display a component based on a condition.
  ● To do this, navigate to the Visibility setting in the Component Configuration pane,
then select Only Show When. Use the Expression Editor to write an expression.
  ● For example, imagine that you want to display a Comments box if a vehicle’s mileage is
above 150,000 miles. You can do this by adding the expression
ri!vehicle.vehicleMileage > 150000. This expression determines whether the
Comments component is displayed on the interface or not. When set to false, the
component is hidden and not evaluated. The default is set to true.
- a!save(ri!vehicle.vehicleDateAdded, today())
- As you plan your first application, keep in mind that interfaces can be built as reusable
blocks. Simply create a reusable interface, and then call it from other interfaces in your
app. For example, the read-only vehicle details that you just added to the supervisor
approval form could have been set up as its own interface. To call a reusable interface
from a different interface, use rule! and the name of the interface you want to reuse


## Troubleshooting
- If you are trying to view an interface and it just keeps saying that you can't cast it as a record type, review "Views and Header" Views > Interface section to make sure that you are including "rv!record" since that references the current record.  Full example is as follows:
  - rule!AX_VehicleSummary(vehicle: rv!record)
- Could not display interface. Please check definition and inputs.
Interface Definition: Expression evaluation error at function a!imageField [line 60]: The image at index 1 in an image gallery component [label=""] has an invalid value for "document". "document" must not be null.
  - This occurs because the value for the document
cannot be null. Let’s fix this by adding test values to this interface. Click Test, and type
the following expression into the vehicle row: rule!AX_GetVehicleByID(1). Click
the Set as default test values link, and then click Test Interface.


## Remember These Functions
- a!queryRecordType()
- a!aggregationFields()
- a!grouping()
- a!measure()
- a!pagingInfo()
- a!sortInfo()
- a!relatedRecordData()
- a!queryFilter()
- a!localVariables()
- a!queryLogicalExpression()
- union()
- if()
- a!isNullOrEmpty()
- today()


## Example Queries

### If statement that checks if date is less than another date
```
if(todate(ri!vehicle.vehicleNextMaintenanceDate) <
todate(ri!vehicle.vehicleLastMaintenanceDate), “The next
maintenance date must be after the last maintenance date.”,
null)
```

### If statement
```
    if(todate(ri!vehicle[Vehicle.lastMaintenanceDate]) > today(),
    "Enter a date before today.",
    null())
```

### Example of using local variables along with an interface definition
```
a!localVariables(
  local!category: rule!AA_GetReferenceData(type: "Category"),
  local!status: rule!AA_GetReferenceData(type: "Status"),
  local!condition: rule!AA_GetReferenceData(type: "Condition"),
a!formLayout(
  label: "Add Vehicle",
  contents: {
    a!columnsLayout(
      columns: {
        a!columnLayout(
          contents: {
            a!sideBySideLayout(
              items: {
                a!sideBySideItem(
                  item: a!textField(
                    label: "Make",
                    labelPosition: "ABOVE",
                    value: ri!vehicle['recordType!{1999b261-4ee1-4bda-bf10-666359b9d5d1}AX Vehicle.fields.{ae08763a-36da-4eae-9d53-86fb03dc8567}vehicleMake'],
                    saveInto: ri!vehicle['recordType!{1999b261-4ee1-4bda-bf10-666359b9d5d1}AX Vehicle.fields.{ae08763a-36da-4eae-9d53-86fb03dc8567}vehicleMake'],
                    characterLimit: 55,
                    required: false
                  )
                ),
                a!sideBySideItem(
                  item: a!textField(
                    label: "Model",
                    labelPosition: "ABOVE",
                    value: ri!vehicle['recordType!{1999b261-4ee1-4bda-bf10-666359b9d5d1}AX Vehicle.fields.{a658f7c9-98e1-4203-ab4d-5578be4089ba}vehicleModel'],
                    saveInto: ri!vehicle['recordType!{1999b261-4ee1-4bda-bf10-666359b9d5d1}AX Vehicle.fields.{a658f7c9-98e1-4203-ab4d-5578be4089ba}vehicleModel'],
                    characterLimit: 55,
                    required: false
                  )
                )
              }
            ),
            a!integerField(
              label: "Year",
              labelPosition: "ABOVE",
              value: ri!vehicle['recordType!{1999b261-4ee1-4bda-bf10-666359b9d5d1}AX Vehicle.fields.{6dca6293-1ee8-4fe3-97e6-eb30bdca13a8}vehicleYear'],
              saveInto: ri!vehicle['recordType!{1999b261-4ee1-4bda-bf10-666359b9d5d1}AX Vehicle.fields.{6dca6293-1ee8-4fe3-97e6-eb30bdca13a8}vehicleYear'],
              required: false
            ),
            a!textField(
              label: "Vin",
              labelPosition: "ABOVE",
              value: ri!vehicle['recordType!{1999b261-4ee1-4bda-bf10-666359b9d5d1}AX Vehicle.fields.{73817c69-6111-40bf-a20f-d03cbb06dd19}vehicleVin'],
              saveInto: ri!vehicle['recordType!{1999b261-4ee1-4bda-bf10-666359b9d5d1}AX Vehicle.fields.{73817c69-6111-40bf-a20f-d03cbb06dd19}vehicleVin'],
              characterLimit: 17,
              required: false
            ),
            a!integerField(
              label: "Mileage",
              labelPosition: "ABOVE",
              value: ri!vehicle['recordType!{1999b261-4ee1-4bda-bf10-666359b9d5d1}AX Vehicle.fields.{091dfe85-2bbc-401e-804b-5b530c936941}vehicleMileage'],
              saveInto: ri!vehicle['recordType!{1999b261-4ee1-4bda-bf10-666359b9d5d1}AX Vehicle.fields.{091dfe85-2bbc-401e-804b-5b530c936941}vehicleMileage'],
              required: false
            ),
            a!textField(
              label: "Color",
              labelPosition: "ABOVE",
              value: ri!vehicle['recordType!{1999b261-4ee1-4bda-bf10-666359b9d5d1}AX Vehicle.fields.{6a96ed1a-b65d-4651-b067-8587e31d3969}vehicleColor'],
              saveInto: ri!vehicle['recordType!{1999b261-4ee1-4bda-bf10-666359b9d5d1}AX Vehicle.fields.{6a96ed1a-b65d-4651-b067-8587e31d3969}vehicleColor'],
              characterLimit: 55,
              required: false
            )
          }
        ),
        a!columnLayout(
          contents: {
            a!sideBySideLayout(
              items: {
                a!sideBySideItem(
                  item: a!dateField(
                    label: "Date Added",
                    labelPosition: "ABOVE",
                    value: ri!vehicle['recordType!{1999b261-4ee1-4bda-bf10-666359b9d5d1}AX Vehicle.fields.{d29de632-ae1d-4bea-9ef1-745c9b0894f1}vehicledateadded'],
                    saveInto: ri!vehicle['recordType!{1999b261-4ee1-4bda-bf10-666359b9d5d1}AX Vehicle.fields.{d29de632-ae1d-4bea-9ef1-745c9b0894f1}vehicledateadded'],
                    required: false
                  )
                ),
                a!sideBySideItem(
                  item: a!dateField(
                    label: "Next Maintenance",
                    labelPosition: "ABOVE",
                    value: ri!vehicle['recordType!{1999b261-4ee1-4bda-bf10-666359b9d5d1}AX Vehicle.fields.{8e10acd2-07f1-4825-aaf1-ef25c4263c57}vehiclenextmaintenancedate'],
                    saveInto: ri!vehicle['recordType!{1999b261-4ee1-4bda-bf10-666359b9d5d1}AX Vehicle.fields.{8e10acd2-07f1-4825-aaf1-ef25c4263c57}vehiclenextmaintenancedate'],
                    required: false,
                    validations: if(todate(ri!vehicle['recordType!{1999b261-4ee1-4bda-bf10-666359b9d5d1}AX Vehicle.fields.{8e10acd2-07f1-4825-aaf1-ef25c4263c57}vehiclenextmaintenancedate']) <
todate(ri!vehicle['recordType!{1999b261-4ee1-4bda-bf10-666359b9d5d1}AX Vehicle.fields.{b72890d6-147d-4aaf-a3cf-df4bd5914937}vehicleLastMaintenanceDate']), "The next 
maintenance date must be after the last maintenance date.",
                    null)
                  
                  )
                ),
                a!sideBySideItem(
                  item: a!dateField(
                    label: "Last Maintenance",
                    labelPosition: "ABOVE",
                    value: ri!vehicle['recordType!{1999b261-4ee1-4bda-bf10-666359b9d5d1}AX Vehicle.fields.{b72890d6-147d-4aaf-a3cf-df4bd5914937}vehicleLastMaintenanceDate'],
                    saveInto: ri!vehicle['recordType!{1999b261-4ee1-4bda-bf10-666359b9d5d1}AX Vehicle.fields.{b72890d6-147d-4aaf-a3cf-df4bd5914937}vehicleLastMaintenanceDate'],
                    required: false
                  )
                )
              }
            ),
            a!fileUploadField(
              label: "Image",
              labelPosition: "ABOVE",
              target: cons!AX_DOCUMENTS_FOLDER_POINTER,
              maxSelections: 1,
              value: ri!vehicle['recordType!{1999b261-4ee1-4bda-bf10-666359b9d5d1}AX Vehicle.fields.{acefde52-ba7c-465e-9503-f1428ee06a70}vehicleimage'],
              saveInto: ri!vehicle['recordType!{1999b261-4ee1-4bda-bf10-666359b9d5d1}AX Vehicle.fields.{acefde52-ba7c-465e-9503-f1428ee06a70}vehicleimage'],
              required: true,
              validations: {}
            ),
            a!dropdownField(
              label: "Category",
              labelPosition: "ABOVE",
              placeholder: "--- Select a Value ---",
              choiceLabels: {"Option 1", "Option 2", "Option 3", "Option 4",
                              "Option 5", "Option 6", "Option 7", "Option 8",
                              "Option 9", "Option 10", "Option 11", "Option 12"},
              choiceValues: {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12},
              saveInto: {},
              searchDisplay: "AUTO",
              validations: {}
            ),
            a!dropdownField(
              label: "Status",
              labelPosition: "ABOVE",
              placeholder: "--- Select a Value ---",
              choiceLabels: {"Option 1", "Option 2", "Option 3", "Option 4",
                              "Option 5", "Option 6", "Option 7", "Option 8",
                              "Option 9", "Option 10", "Option 11", "Option 12"},
              choiceValues: {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12},
              saveInto: {},
              searchDisplay: "AUTO",
              validations: {}
            ),
            a!dropdownField(
              label: "Condition",
              labelPosition: "ABOVE",
              placeholder: "--- Select a Value ---",
              choiceLabels: {"Option 1", "Option 2", "Option 3", "Option 4",
                              "Option 5", "Option 6", "Option 7", "Option 8",
                              "Option 9", "Option 10", "Option 11", "Option 12"},
              choiceValues: {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12},
              saveInto: {},
              searchDisplay: "AUTO",
              validations: {}
            )
          }
        )
      }
    )
  },
  buttons: a!buttonLayout(
    primaryButtons: {
      a!buttonWidget(
        label: "Submit",
        submit: true,
        style: "PRIMARY",
        validate: true
      )
    },
    secondaryButtons: {
      a!buttonWidget(
        label: "Cancel",
        value: true,
        saveInto: ri!cancel,
        submit: true,
        style: "NORMAL",
        validate: false
      )
    }
  )
)
)

```

### Type: Sort and Limit
```
a!queryRecordType(
  recordType: 'recordType!{058be2d0-0acb-453f-93ac-4c9f650cf004}Vehicle',
  fields: {
    'recordType!{058be2d0-0acb-453f-93ac-4c9f650cf004}Vehicle.relationships.{ed72be21-a335-4715-9c93-5d34619bd675}maintenance.fields.{36d0652b-4371-41cb-8714-3324161cf92d}cost'
  },
  pagingInfo: a!pagingInfo(
    startIndex: 1,
    batchSize: 10,
    sort: {
      a!sortInfo(
        field: 'recordType!{058be2d0-0acb-453f-93ac-4c9f650cf004}Vehicle.fields.{843e6755-29db-4e56-b606-9bdbec44a31c}mileage',
        ascending: true
      )
    }
  )
).data

```
### Get unique list of results
```
a!localVariables(
  local!data: a!queryRecordType(
    recordType: 'recordType!{058be2d0-0acb-453f-93ac-4c9f650cf004}Vehicle',
    fields: 'recordType!{058be2d0-0acb-453f-93ac-4c9f650cf004}Vehicle.fields.{1a2c6566-65e6-4a1a-81be-c5279df93e58}make',
    pagingInfo: a!pagingInfo(startIndex: 1, batchSize: 100)
  ).data['recordType!{058be2d0-0acb-453f-93ac-4c9f650cf004}Vehicle.fields.{1a2c6566-65e6-4a1a-81be-c5279df93e58}make'],
  union(local!data, local!data)
)
```
Additional Notes: Remember to add something like union() to end of a!localVariables so that it knows how to render the resulting data


### An example of an interface
```
{
  a!cardLayout(
    contents: {
      a!sideBySideLayout(
        items: {
          a!sideBySideItem(
            item: a!richTextDisplayField(
              label: "Rich Text",
              labelPosition: "COLLAPSED",
              value: {
                a!richTextItem(
                  text: {
                    "Acme Automobile "
                  },
                  size: "LARGE"
                ),
                char(10),
                a!richTextItem(
                  text: {
                    "Fleet and Maintenance Statistics"
                  },
                  color: "#b7b7b7",
                  size: "MEDIUM_PLUS"
                )
              },
              align: "LEFT"
            ),
            width: "3X"
          ),
          a!sideBySideItem(
            item: a!richTextDisplayField(
              label: "Rich Text",
              labelPosition: "COLLAPSED",
              value: {
                a!richTextIcon(
                  icon: "car",
                  size: "LARGE_PLUS"
                )
              },
              align: "RIGHT"
            ),
            width: "1X"
          ),
          a!sideBySideItem(
            item: a!richTextDisplayField(
              label: "Rich Text",
              labelPosition: "COLLAPSED",
              value: {
                a!richTextIcon(
                  icon: "bar-chart",
                  color: "#cc0000",
                  size: "LARGE_PLUS"
                )
              },
              align: "RIGHT"
            ),
            width: "MINIMIZE"
          )
        },
        alignVertical: "MIDDLE"
      )
    },
    height: "AUTO",
    style: "#1C4587",
    marginBelow: "STANDARD"
  ),
  a!sectionLayout(
    label: "Fleet Data",
    contents: {
      a!columnsLayout(
        columns: {
          a!columnLayout(
            contents: rule!AA_VehiclesbyMakeStatusColumnChart()
          ),
          a!columnLayout(
            contents: rule!AA_VehiclesAddedbyRegistrar(lockCount: true()),
            width: "NARROW_PLUS"
          )
        }
      )
    },
    divider: "BELOW"
  ),
  a!sectionLayout(
    label: "",
    contents: {
      a!columnsLayout(
        columns: {
          a!columnLayout(
            contents: rule!AA_VehiclesByAgePieChart()
          ),
          a!columnLayout(
            contents: rule!AA_VehiclesAddedByMonth()
          )
        }
      )
    },
    divider: "BELOW"
  ),
  a!sectionLayout(
    label: "Fleet Inventory by Status",
    contents: {rule!AA_FleetbyStatusDrillablePieChart()}
  ),
  a!sectionLayout(
    label: "Vehicle KPIs",
    contents: {
      a!columnsLayout(
        columns: {
          a!columnLayout(
            contents: {
              a!gaugeField(
                labelPosition: "COLLAPSED",
                percentage: rule!QYD_GetVehiclesAddedThisMonth(),
                primaryText: a!gaugePercentage()
              )
            }
          ),
          a!columnLayout(
            contents: {}
          ),
          a!columnLayout(
            contents: {}
          )
        }
      )
    }
  )
 }
```